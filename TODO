# REQUIREMENTS

- Create a client: Most of your time will be spent on the API layer of this app, but you'll need to create a client prototype that allows non-technical users to do something interesting or valuable with the API. You should refer to the criteria for capstones outlined here.

- Serve static files: The server, in addition to offering a REST API, will need to serve your client and any other static assets (for instance, images).

- Implement a REST API with all four CRUD operations: Your app idea will determine the content of what your API offers, but at a minimum, your app should support all four CRUD operations (create, read, update, delete).

- Comprehensive Tests for the API Layer: Each API endpoint should have test coverage. At a minimum that means having tests for the normal case â€” that means that if you had, say an account creation endpoint, you'd have a test that proves that when the endpoint gets a POST request with the correct data, a new account is created, and the expected response is returned.

- Use Continuous Integration: We'll ask you to set up continuous integration early on in your development process. This will give you an opportunity to practice on the job skills, and ensure that you don't ship broken code.


# USER STORIES

- User should be able to:
    + Login or Register(Sign In) with email (or Google or FB account --> bonus)
    + Reset/recover their password
    + Search the database/API for songs.
    + Create/Read/Update/Delete playlists. (CRUD)
    + Save playlist in the database
    + Filter/Search playlists by title/time/genre/creator/songsNumber/lastModified/...
    + ???